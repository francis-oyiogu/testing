name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: [ubuntu-latest]

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set-up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build the application
        run: mvn clean install -DskipTests=true

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/gcpdepp .

      - name: Push to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/gcpdepp:latest


  deploy:
    runs-on: another
    needs: build
    steps:
#      - name: Set up permissions for Docker socket
#        run: sudo chmod 666 /var/run/docker.sock
#
#      - name: Login to Docker Hub
#        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
#
#      - name: Pull Image From DockerHub
#        run: docker pull ${{ secrets.DOCKER_USERNAME }}/gcpdepp:latest
      - name: Pull Docker image
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker pull "${{ secrets.DOCKER_USERNAME }}/gcpdepp:latest"

      - name: Remove Old Container
        run: docker rm -f depp-app || true

      - name: Run Docker Container
        run: docker run -d -p 8090:8090 --name depp-app ${{ secrets.DOCKER_USERNAME }}/gcpdepp:$latest


#--------------------------------------------------------------------

#name: ci
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  build:
#    runs-on: [ubuntu-latest]
#
#    steps:
#      - uses: actions/checkout@v4
#
#      #      - name: Set up Docker Buildx
#      #        uses: docker/setup-buildx-action@v3
#
#      - name: Set-up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#      #          architecture: x64
#
#      - name: Cache local Maven repository
#        uses: actions/cache@v2
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#
#      - name: Build the application
#        run: mvn clean install -DskipTests=true
#      #        run: |
#      #          mvn clean
#      #          mvn -B package -DskipTests=true --file pom.xml
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Push to Docker Hub
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          dockerfile: Dockerfile
#          push: true
#          tags: ${{ secrets.DOCKER_USERNAME }}/gcpdepp:latest
#  #          tags: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
#
#  #      - name: Build and push Docker image to ECR
#  #        env:
#  #          AWS_REGION: ${{ secrets.AWS_REGION }}
#  #          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#  #          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#  #          ECR_REPO: gcp-depp
#  #          IMAGE_TAG: latest
#  #        run: |
#  #          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
#  #          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG .
#  #          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG
#
#
#  deploy:
#    needs: build
#    runs-on: [aws-ec2]
#    steps:
#      - name: Pull Image From DockerHub
#        uses: docker/pull-action@v2
#        #        run: docker pull ${{ secrets.DOCKER_USERNAME }}/gcpdepp:latest
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#          repository: ${{ secrets.DOCKER_USERNAME }}/gcpdepp
#          tag: latest
#
#      - name: Remove Old Container
#        #        run: docker rm -f depp-app
#        uses: docker/cli@v2
#        with:
#          command: container rm -f depp-app || true
#
#      - name: Run Docker Container
#        #        run: docker run -d -p 8090:8090 --name depp-app ${{ secrets.DOCKER_USERNAME }}/gcpdepp:$latest
#        uses: docker/cli@v2
#        with:
#          command: container run -d -p 8090:8090 --name depp-app ${{ secrets.DOCKER_USERNAME }}/gcpdepp:latest
#
